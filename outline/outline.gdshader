shader_type canvas_item;

uniform bool outline_active = false;
uniform vec4 outline_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float outline_thickness : hint_range(0.5, 5.0) = 2.0;
uniform float alpha_threshold : hint_range(0.1, 0.9) = 0.5;

float has_solid_neighbor(sampler2D texture_sample, vec2 uv_coord, vec2 pixel_size) {
	vec2 offset = outline_thickness * pixel_size;
	float sum_alpha = texture(texture_sample, uv_coord + vec2(1.0, 0.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(-1.0, 0.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(0.0, 1.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(0.0, -1.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(1.0, 1.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(-1.0, 1.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(1.0, -1.0) * offset).a
		+ texture(texture_sample, uv_coord + vec2(-1.0, -1.0) * offset).a;
	return smoothstep(0.0, 1.0, sum_alpha);
}

void fragment() {
	if (outline_active) {
		float outline_mask = has_solid_neighbor(TEXTURE, UV, TEXTURE_PIXEL_SIZE);
		float alpha_blend_factor = smoothstep(0.0, alpha_threshold, COLOR.a);
		COLOR.rgb = mix(outline_color.rgb, COLOR.rgb, alpha_blend_factor);
		COLOR.a = max(COLOR.a, outline_mask);
	}
}
